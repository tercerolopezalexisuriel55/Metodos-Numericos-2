# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CKd7lq8scAeGLm_3hWA8tamitY3UuAr4
"""

#Modulo: MetodoBroyden.py import MetodoBroyden as MB
#Implementacion del metodo de Broyden para sistemas de ecuaciones no lienales.
#Autor: Alexis Tercero (@math.by.uri) 
#Exitoso

import numpy as np
import math

#implementacion de norma del supremo
def norma(Y):
  '''Y: numpy.ndarray'''
  delta = np.abs(Y)
  return max(delta)

def VFormat(X):
  '''
  X: numpy.ndarray
  '''
  if X.size == 3:
    return '({:.5f},{:.5f},{:.5f})'.format(*X)
  if X.size == 2:
    return '({:.5f},{:.5f})'.format(*X)
#------------------------------------------------------------------------------
def Broyden(Xk,F,J,N=30,T=10e-6):
  '''
  Metodo de Broyden para sistemas no lienales nxn
  Parametros:
    Xk: numpy.ndarray.
    F: function. Sietema No lienal F(X).
    J: function. Matriz Jacobiana de F como funcion J(X).
    N: int. Numero maximo de iteraciones, 30 por defecto.
    T: float. Tolerancia al error, 10e-7 por defecto.

  Retorna la solucion del sistema F: 
    X: numpy.ndarray
  '''
  print('Metodo de Broyden')
  print('Punto inicial X0:',Xk)
  #paso 1
  A0 = J(*Xk)
  V = F(*Xk)
  #paso 2
  A = np.linalg.inv(A0)
  #paso 3
  S = np.matmul(-A,V.T)
  Xk = Xk.T + S #X_1
  print('punto X{}:'.format(1),list(Xk))
  k = 2
  #paso 4
  while k <= N:
    #paso 5
    W = V
    V = F(*Xk)
    Y = V - W
    #paso 6
    Z = np.matmul(-A,Y)
    #paso 7
    P = np.matmul(-S.T,Y) #escalar
    #paso 8
    U = np.matmul(S.T,A) #U == U.T 
    #paso 9
    A = A + np.matmul(S+Z,U)/P #U == U.T 
    #paso 10
    S = np.matmul(-A,V)
    #paso 11
    Xk = Xk + S # X_2 la peimera vez que entra al while
    #paso 12
    #se presentan datos resultados por iteracion
    delta = norma(S)
    print('punto X{}:'.format(k),list(Xk) , 'error: ', delta)
    if delta < T:
      print('\n\nLa solucion es:',VFormat(Xk))#crear funcion FormatoVector
      return Xk
    #paso 13
    k = k+1
  #paso 14
  else: print('No se llego a la sulucion en {} iteraciones.'.format(N))